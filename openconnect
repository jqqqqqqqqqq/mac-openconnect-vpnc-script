#!/bin/bash
#
# Originally part of vpnc source code:
# © 2005-2012 Maurice Massar, Jörg Mayer, Antonio Borneo et al.
# © 2009-2012 David Woodhouse <dwmw2@infradead.org>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#
################
#
# List of parameters passed through environment
#* reason                       -- why this script was called, one of: pre-init connect disconnect reconnect
#* VPNGATEWAY                   -- vpn gateway address (always present)
#* TUNDEV                       -- tunnel device (always present)
#* INTERNAL_IP4_ADDRESS         -- address (always present)
#* INTERNAL_IP4_MTU             -- mtu (often unset)
#* INTERNAL_IP4_NETMASK         -- netmask (often unset)
#* INTERNAL_IP4_NETMASKLEN      -- netmask length (often unset)
#* INTERNAL_IP4_NETADDR         -- address of network (only present if netmask is set)
#* INTERNAL_IP4_DNS             -- list of dns servers
#* INTERNAL_IP4_NBNS            -- list of wins servers
#* INTERNAL_IP6_ADDRESS         -- IPv6 address
#* INTERNAL_IP6_NETMASK         -- IPv6 netmask
#* INTERNAL_IP6_DNS             -- IPv6 list of dns servers
#* CISCO_DEF_DOMAIN             -- default domain name
#* CISCO_BANNER                 -- banner from server
#* CISCO_SPLIT_INC              -- number of networks in split-network-list
#* CISCO_SPLIT_INC_%d_ADDR      -- network address
#* CISCO_SPLIT_INC_%d_MASK      -- subnet mask (for example: 255.255.255.0)
#* CISCO_SPLIT_INC_%d_MASKLEN   -- subnet masklen (for example: 24)
#* CISCO_SPLIT_INC_%d_PROTOCOL  -- protocol (often just 0)
#* CISCO_SPLIT_INC_%d_SPORT     -- source port (often just 0)
#* CISCO_SPLIT_INC_%d_DPORT     -- destination port (often just 0)
#* CISCO_IPV6_SPLIT_INC         -- number of networks in IPv6 split-network-list
#* CISCO_IPV6_SPLIT_INC_%d_ADDR -- IPv6 network address
#* CISCO_IPV6_SPLIT_INC_$%d_MASKLEN -- IPv6 subnet masklen

# FIXMEs:

# Section A: route handling

# 1) The 3 values CISCO_SPLIT_INC_%d_PROTOCOL/SPORT/DPORT are currently being ignored
#   In order to use them, we'll probably need os specific solutions
#   * Linux: iptables -t mangle -I PREROUTING <conditions> -j ROUTE --oif $TUNDEV
#       This would be an *alternative* to changing the routes (and thus 2) and 3)
#       shouldn't be relevant at all)
# 2) There are two different functions to set routes: generic routes and the
#   default route. Why isn't the defaultroute handled via the generic route case?
# 3) In the split tunnel case, all routes but the default route might get replaced
#   without getting restored later. We should explicitely check and save them just
#   like the defaultroute
# 4) Replies to a dhcp-server should never be sent into the tunnel

# Section B: Split DNS handling

# 1) Maybe dnsmasq can do something like that
# 2) Parse dns packets going out via tunnel and redirect them to original dns-server

#env | sort
#set -x


# edited by jqqqqqqqqqq

# =========== script (variable) setup ====================================

PATH=/sbin:/usr/sbin:$PATH

DEFAULT_ROUTE_FILE6=/var/run/vpnc/defaultroute6
RESOLV_CONF_BACKUP=/var/run/vpnc/resolv.conf-backup
SCRIPTNAME=`basename $0`

# OS X
if [ ! -d "/var/run/vpnc" ]; then
	mkdir -p /var/run/vpnc
fi


# =========== tunnel interface handling ====================================

do_ifconfig() {
	if [ -n "$INTERNAL_IP4_MTU" ]; then
		MTU=$INTERNAL_IP4_MTU
	fi

	if [ -z "$MTU" ]; then
		MTU=1500
	fi

	ifconfig "$TUNDEV" inet "$INTERNAL_IP4_ADDRESS" "$INTERNAL_IP4_ADDRESS" netmask 255.255.255.255 mtu ${MTU} up


	if [ -n "$INTERNAL_IP4_NETMASK" ]; then
		set_network_route $INTERNAL_IP4_NETADDR $INTERNAL_IP4_NETMASK $INTERNAL_IP4_NETMASKLEN
	fi

	# If the netmask is provided, it contains the address _and_ netmask
	if [ -n "$INTERNAL_IP6_ADDRESS" ] && [ -z "$INTERNAL_IP6_NETMASK" ]; then
	    INTERNAL_IP6_NETMASK="$INTERNAL_IP6_ADDRESS/128"
	fi
	if [ -n "$INTERNAL_IP6_NETMASK" ]; then
	    ifconfig "$TUNDEV" inet6 $INTERNAL_IP6_NETMASK mtu $MTU up
	fi
}


# =========== route handling ====================================

get_default_gw() {
	# isn't -n supposed to give --numeric output?
	# apperently not...
	# Get rid of lines containing IPv6 addresses (':')
	# hack: only modify first default
	netstat -r -n | awk '/:/ { next; } /^(default|0\.0\.0\.0)/ { print $2; }' | head -1
}

get_default_gw_inet6() {  # patched for ipv6 gw
	netstat -r -n | awk ' /^default.*:.*en.*$/ { print $2; }' | head -1
}

set_vpngateway_route() {  # patched for ipv6 gw
	if `echo "$VPNGATEWAY" | grep : >/dev/null` ; then
		route add -inet6 -host "$VPNGATEWAY"  "`get_default_gw_inet6`"
	else
		route add -host "$VPNGATEWAY"  "`get_default_gw`"
	fi
}

set_network_route() {
	NETWORK="$1"
	NETMASK="$2"
	NETMASKLEN="$3"
	route add -net "$NETWORK" -netmask "$NETMASK"  "$INTERNAL_IP4_ADDRESS" 
}

set_ipv6_default_route() {
	DEFAULTGW="`get_default_gw_inet6`"
	echo "$DEFAULTGW" > "$DEFAULT_ROUTE_FILE6"
	route delete -inet6 default "$DEFAULTGW"
	route add -inet6 default "$INTERNAL_IP6_ADDRESS"
}

set_ipv6_network_route() {
	NETWORK="$1"
	NETMASK="$2"
	route add -inet6 -net "$NETWORK/$NETMASK" "$INTERNAL_IP6_ADDRESS" 
	:
}


# =========== resolv.conf handling ====================================

modify_resolvconf() {
	grep '^#@VPNC_GENERATED@' /etc/resolv.conf > /dev/null 2>&1 || cp -- /etc/resolv.conf "$RESOLV_CONF_BACKUP"
	NEW_RESOLVCONF="#@VPNC_GENERATED@ -- this file is generated by vpnc
# and will be overwritten by vpnc
# as long as the above mark is intact"

	# If multiple domains are listed, prefer the first for "domain".
	DOMAIN="${CISCO_DEF_DOMAIN%% *}"
	# Remember the original value of CISCO_DEF_DOMAIN we need it later
	CISCO_DEF_DOMAIN_ORIG="$CISCO_DEF_DOMAIN"
	# Don't step on INTERNAL_IP4_DNS value, use a temporary variable
	INTERNAL_IP4_DNS_TEMP="$INTERNAL_IP4_DNS"
	exec 6< "$RESOLV_CONF_BACKUP"
	while read LINE <&6 ; do
		case "$LINE" in
			nameserver*)
				if [ -n "$INTERNAL_IP4_DNS_TEMP" ]; then
					read ONE_NAMESERVER INTERNAL_IP4_DNS_TEMP <<-EOF
	$INTERNAL_IP4_DNS_TEMP
EOF
					LINE="nameserver $ONE_NAMESERVER"
				else
					LINE=""
				fi
				;;
			search*)
				if [ -n "$CISCO_DEF_DOMAIN" ]; then
					LINE="$LINE $CISCO_DEF_DOMAIN"
					CISCO_DEF_DOMAIN=""
				fi
				;;
			domain*)
				if [ -n "$DOMAIN" ]; then
					LINE="domain $DOMAIN"
				fi
				;;
		esac
		NEW_RESOLVCONF="$NEW_RESOLVCONF
$LINE"
	done
	exec 6<&-

	for i in $INTERNAL_IP4_DNS_TEMP ; do
		NEW_RESOLVCONF="$NEW_RESOLVCONF
nameserver $i"
	done
	if [ -n "$CISCO_DEF_DOMAIN" ]; then
		NEW_RESOLVCONF="$NEW_RESOLVCONF
search $CISCO_DEF_DOMAIN"
	fi
	echo "$NEW_RESOLVCONF" > /etc/resolv.conf


	OVERRIDE_PRIMARY=""
	if [ -n "$CISCO_SPLIT_INC" ]; then
		if [ $CISCO_SPLIT_INC -lt 1 ]; then
			# Must override for correct default route
			# Cannot use multiple DNS matching in this case
			OVERRIDE_PRIMARY='d.add OverridePrimary # 1'
		fi
		# Overriding the default gateway breaks split routing
		OVERRIDE_GATEWAY=""
		# Not overriding the default gateway breaks usage of
		# INTERNAL_IP4_DNS. Prepend INTERNAL_IP4_DNS to list
		# of used DNS servers
		SERVICE=`echo "show State:/Network/Global/IPv4" | scutil | grep -oE '[a-fA-F0-9]{8}-([a-fA-F0-9]{4}-){3}[a-fA-F0-9]{12}'`
		SERVICE_DNS=`echo "show State:/Network/Service/$SERVICE/DNS" | scutil | grep -oE '([0-9]{1,3}[\.]){3}[0-9]{1,3}' | xargs`
		if [ X"$SERVICE_DNS" != X"$INTERNAL_IP4_DNS" ]; then
			scutil >/dev/null 2>&1 <<-EOF
				open
				get State:/Network/Service/$SERVICE/DNS
				d.add ServerAddresses * $INTERNAL_IP4_DNS $SERVICE_DNS
				set State:/Network/Service/$SERVICE/DNS
				close
			EOF
		fi
				else
		# No split routing. Override default gateway
		OVERRIDE_GATEWAY="d.add Router $INTERNAL_IP4_ADDRESS"
	fi
	# Uncomment the following if/fi pair to use multiple
	# DNS matching when available.  When multiple DNS matching
	# is present, anything reading the /etc/resolv.conf file
	# directly will probably not work as intended.
	#if [ -z "$CISCO_DEF_DOMAIN_ORIG" ]; then
		# Cannot use multiple DNS matching without a domain
		OVERRIDE_PRIMARY='d.add OverridePrimary # 1'
	#fi
	scutil >/dev/null 2>&1 <<-EOF
		open
		d.init
		d.add ServerAddresses * $INTERNAL_IP4_DNS
		set State:/Network/Service/$TUNDEV/DNS
		d.init
		$OVERRIDE_GATEWAY
		d.add Addresses * $INTERNAL_IP4_ADDRESS
		d.add SubnetMasks * 255.255.255.255
		d.add InterfaceName $TUNDEV
		$OVERRIDE_PRIMARY
		set State:/Network/Service/$TUNDEV/IPv4
		close
	EOF
	if [ -n "$CISCO_DEF_DOMAIN_ORIG" ]; then
		scutil >/dev/null 2>&1 <<-EOF
			open
			get State:/Network/Service/$TUNDEV/DNS
			d.add DomainName $CISCO_DEF_DOMAIN_ORIG
			d.add SearchDomains * $CISCO_DEF_DOMAIN_ORIG
			d.add SupplementalMatchDomains * $CISCO_DEF_DOMAIN_ORIG
			set State:/Network/Service/$TUNDEV/DNS
			close
		EOF
	fi

}

restore_resolvconf() {
	if [ ! -f "$RESOLV_CONF_BACKUP" ]; then
		return
	fi
	grep '^#@VPNC_GENERATED@' /etc/resolv.conf > /dev/null 2>&1 && cat "$RESOLV_CONF_BACKUP" > /etc/resolv.conf
	rm -f -- "$RESOLV_CONF_BACKUP"

	scutil >/dev/null 2>&1 <<-EOF
		open
		remove State:/Network/Service/$TUNDEV/IPv4
		remove State:/Network/Service/$TUNDEV/DNS
		close
	EOF
	# Split routing required prepending of INTERNAL_IP4_DNS
	# to list of used DNS servers
	if [ -n "$CISCO_SPLIT_INC" ]; then
		SERVICE=`echo "show State:/Network/Global/IPv4" | scutil | grep -oE '[a-fA-F0-9]{8}-([a-fA-F0-9]{4}-){3}[a-fA-F0-9]{12}'`
		SERVICE_DNS=`echo "show State:/Network/Service/$SERVICE/DNS" | scutil | grep -oE '([0-9]{1,3}[\.]){3}[0-9]{1,3}' | xargs`
		if [ X"$SERVICE_DNS" != X"$INTERNAL_IP4_DNS" ]; then
			scutil >/dev/null 2>&1 <<-EOF
				open
				get State:/Network/Service/$SERVICE/DNS
				d.add ServerAddresses * ${SERVICE_DNS##$INTERNAL_IP4_DNS}
				set State:/Network/Service/$SERVICE/DNS
				close
			EOF
		fi
	fi

}



# ========= Toplevel state handling  =======================================


do_connect() {
	if [ -n "$CISCO_BANNER" ]; then
		echo "Connect Banner:"
		echo "$CISCO_BANNER" | while read LINE ; do echo "|" "$LINE" ; done
		echo
	fi

	set_vpngateway_route
	do_ifconfig
	# since default route has been automatically setted, set_default_route has been safely removed
	if [ -n "$CISCO_SPLIT_INC" ]; then
		i=0
		while [ $i -lt $CISCO_SPLIT_INC ] ; do
			eval NETWORK="\${CISCO_SPLIT_INC_${i}_ADDR}"
			eval NETMASK="\${CISCO_SPLIT_INC_${i}_MASK}"
			eval NETMASKLEN="\${CISCO_SPLIT_INC_${i}_MASKLEN}"
			if [ "$NETWORK" != "0.0.0.0" ]; then
				set_network_route "$NETWORK" "$NETMASK" "$NETMASKLEN"
			fi
			i=`expr $i + 1`
		done
		for i in $INTERNAL_IP4_DNS ; do
			echo "$i" | grep : >/dev/null || \
				set_network_route "$i" "255.255.255.255" "32"
		done
	fi
	
	if [ -n "$CISCO_IPV6_SPLIT_INC" ]; then
		i=0
		while [ $i -lt $CISCO_IPV6_SPLIT_INC ] ; do
			eval NETWORK="\${CISCO_IPV6_SPLIT_INC_${i}_ADDR}"
			eval NETMASKLEN="\${CISCO_IPV6_SPLIT_INC_${i}_MASKLEN}"
			if [ $NETMASKLEN -lt 128 ]; then
				set_ipv6_network_route "$NETWORK" "$NETMASKLEN"
			else
				set_ipv6_default_route
			fi
			i=`expr $i + 1`
		done
		for i in $INTERNAL_IP4_DNS ; do  # wtf, ipv6 dns are also stored in IP4_DNS
			if echo "$i" | grep : >/dev/null; then
				set_ipv6_network_route "$i" "128"
			fi
		done
	elif [ -n "$INTERNAL_IP6_NETMASK" -o -n "$INTERNAL_IP6_ADDRESS" ]; then
		set_ipv6_default_route
	fi

	if [ -n "$INTERNAL_IP4_DNS" ]; then
		modify_resolvconf
	fi
}

test_reset_route() {
	ens=`netstat -r -n | awk ' /^default.*\..*en.*$/ { print $6; }'`
	for i in {0..1}; do
  	route -n flush >/dev/null 2>&1  # several times
	done
	for i in $ens; do
		echo reset "$i"
		ifconfig "$i" down
		sleep 1
		ifconfig "$i" up
		sleep 2
	done
}

do_disconnect() {
	test_reset_route
	if [ -n "$INTERNAL_IP4_DNS" ]; then
		restore_resolvconf
	fi
}

#### Main

if [ -z "$reason" ]; then
	echo "this script must be called from vpnc" 1>&2
	exit 1
fi

case "$reason" in
	pre-init)
		;;
	connect)
		do_connect
		;;
	disconnect)
		do_disconnect
		;;
	reconnect)
		;;
	*)
		echo "unknown reason '$reason'. Maybe vpnc-script is out of date" 1>&2
		exit 1
		;;
esac

exit 0
